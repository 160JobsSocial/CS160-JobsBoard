<?php
// $Id: message.install,v 1.5 2010/06/07 10:54:11 amitaibu Exp $

/**
 * @file
 * Install, update, and uninstall functions for the message module.
 */

/**
 * Implements hook_install().
 */
function message_install() {
  // Create the field holding the message text.
  $field = array(
    'field_name' => MESSAGE_FIELD_MESSAGE_TEXT,
    'type' => 'text',
    'entity_types' => array('message_type'),
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => TRUE,
  );
  $field = field_create_field($field);
  $instance = array(
    'field_name' => MESSAGE_FIELD_MESSAGE_TEXT,
    'bundle' => 'message_type',
    'entity_type' => 'message_type',
    'label' => t('Message text'),
    'description' => t('This is the text of all messages of this type.'),
    'required' => TRUE,
  );
  field_create_instance($instance);

  variable_del('message_entity_delete_cleanup');
}

/**
 * Implements hook_uninstall().
 */
function message_uninstall() {
  $instance = field_info_instance('message_type', 'message_text', 'message_type');
  field_delete_instance($instance);
  field_delete_field('message_text');
}

/**
 * Implements hook_schema()
 */
function message_schema() {
  $schema['message_type'] = array(
    'description' => 'Storage for user-defined message templates.',
    'fields' => array(
      // Although the "name" should be enough as the primary key, the numeric ID
      // is required for the internal use of entity API.
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Numeric message type ID.',
      ),
      'name' => array(
        'description' => 'The unified identifier for a message type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description for this message.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'argument_keys' => array(
        'description' => 'Serialized array with the argument keys',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['message'] = array(
    'description' => 'An instance of a message type (e.g. like a node is an instance of a node type).',
    'fields' => array(
      'mid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'description' => 'The Unique ID of the message.',
      ),
      'name' => array(
        'description' => 'Reference to a message a type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'arguments' => array(
        'description' => 'Serialized array with the arguments',
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user ID of the acting user.',
        'type' => 'int',
        'default value' => NULL,
        'unsigned' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'When the message instance was recorded.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'message_type' => array(
        'table' => 'message_type',
        'columns' => array('name' => 'name'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('mid'),
  );
  return $schema;
}


/**
 * Add in the exportable entity db columns as required by the entity API.
 */
function message_update_7000() {
  db_add_field('message_type', 'status', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => ENTITY_CUSTOM,
    'size' => 'tiny',
    'description' => 'The exportable status of the entity.',
  ));
  db_add_field('message_type', 'module', array(
    'description' => 'The name of the providing module if the entity has been defined in code.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
  ));
}

/**
 * Add the argument keys column of a message type.
 */
function message_update_7001() {
  db_add_field('message_type', 'argument_keys', array(
    'description' => 'Serialized array with the argument keys',
    'type' => 'text',
    'serialize' => TRUE,
  ));
}

